# File setup Serenity, encode Typesafe (Config-File) with HOCON

# locate in disk automation project
pathRootProject = "${user.dir}"
# Estructura de ruta relativa del paquete base
urlBasePackageProject = "${build.gradle.project.package.base.url}"
# Structure relative package base
basePackageProject = "${gradle.props.project.package.base}"
# Relativo al paquete de recursos de test
urlTestResourcePackageProject = "${gradle.props.project.package.resource.test.url}"


# Ubicacion de las apps disponibles en local, sujetas a prueba
pathEnvironments = "#{pathRootProject}/#{urlTestResourcePackageProject}/envs"


# Ambiente por defecto en caso de no recibirse el argumento -Denvironment=
# Selecciona el ambiente local, del propietario/usuario de la maquina
#environment = "${user.name}.local"
environment = "tester.local"

# Administracion de ambientes
environments {

  include "envs/testers/yesenia_local.conf"

}


enable.markdown="story,narrative,scenario,step"

# feature files characteristics
feature {
  file.language = en
  file.encoding = "#{gradle.props.resource.encode}"
}

serenity {

  # FOR_EACH_ACTION
  # BEFORE_AND_AFTER_EACH_STEP
  # AFTER_EACH_STEP
  # FOR_FAILURES
  take.screenshots = AFTER_EACH_STEP

  extension.packages = "#{basePackageProject}.setups.hooks"
  ext.packages = "#{basePackageProject}.setups.hooks"

  # level logging trace
  logging = VERBOSE

  # encode build report
  report.encoding = "#{gradle.props.resource.encode}"
  encoding = "#{gradle.props.project.encode}"

  # project name in the report
  project.name = "Automation Tests"

  compress.filenames = true

  //miliseconds
  #step.delay = 500

}

report {
  tagtypes = "capability,feature"
}
